'_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
' UPDATES JULY 2023 SWENNERMARK@ENCTECHSALES.COM 
    'If Arguments 9, 10 and 11 are passed, the function returns the CONVERTED value instead of a percentage value, and sets Arg[11] to the percentage value
        'Arg[9]  = Zero Percent Position
        'Arg[10] = Hundred Percent Position
        'Arg[11] = Percent Numeric

    ' Pidout = PIDControl(0, Temp, Stpt, I.Vlv, Pk, Ik, Dk, OldError) sets the Pidout to a value between 0-100 percent
        ' NO ADDITIONAL ARGS PASSED

    ' Pidout = PIDControl(0, Temp, Stpt, I.Vlv, Pk, Ik, Dk, OldError, 0.1, 12.85, Pct.Vlv)  - sets the Pidout to a value between 0.1-12.85 (0.1=0% and 12.85=100%), and sets Pct.Vlv to a value between 0-100 percent
        ' WITH ARGS 9. 10, 11 PASSED

    ' Pidout = PIDControl(0, Temp, Stpt, I.Vlv, Pk, Ik, Dk, OldError, 12.85, 0.1, Pct.Vlv) - sets the Pidout to a value between 0.1-12.85 (12.85=0% and 01.=100%), and sets Pct.Vlv to a value between 0-100 percent
        ' WITH ARGS 9. 10, 11 PASSED

'_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
' DEFINE REQUIRED ARGUMENTS
Arg 1 ReverseActing
Arg 2 ProcessVariable
Arg 3 Setpoint
Arg 4 Integral
Arg 5 ProportionalK
Arg 6 IntegralK
Arg 7 DerivativeK
Arg 8 OldError

Numeric ThisError, Derivative, Pidout
If ReverseActing = 1 then ThisError = ProcessVariable - Setpoint
Else ThisError = Setpoint - ProcessVariable

' Calculate the rate of change of the error for the derivative term
Derivative = ThisError - OldError

' Update the integral term with the current error and prevent windup by limiting between 0 and 100
Integral = maximum(minimum(Integral + ThisError * IntegralK, 100), 0)

' Update the OldError for the next iteration
OldError = ThisError

' Calculate the PID Pidout
Pidout = Integral + ThisError * ProportionalK + Derivative * DerivativeK

If passed(9) & passed(10) & passed(11) then
    Arg[11] = maximum(minimum(Pidout, 100), 0)
    Return (Arg[11] * ((Arg[10] - Arg[9]) / 100)) + Arg[9]
Else
    Return maximum(minimum(Pidout, 100), 0)
Endif
