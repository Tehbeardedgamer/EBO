'¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
'AUTHOR SPENCER WENNERMARK 8/12/2023 ENTECH AUSTIN, TX
'_____________________________________________________

'--- HEADER COMMENTS ---
' This script manages and sequences CHILLERs based on various criteria such as their status, failure rate,
' current runtime, and heating call. It regularly checks for changes in CHILLER availability and adjusts the
' sequencing accordingly.

'VARIABLES
NUMERIC INPUT STATUS_A, STATUS_B, STATUS_C, STATUS_D, STATUS_E, STATUS_F, STATUS_G, STATUS_H, STATUS_I, STATUS_J, STATUS_K, STATUS_L, STATUS_M, STATUS_N, STATUS_O, STATUS_P
NUMERIC INPUT DOWN_A, DOWN_B, DOWN_C, DOWN_D, DOWN_E, DOWN_F, DOWN_G, DOWN_H, DOWN_I, DOWN_J, DOWN_K, DOWN_L, DOWN_M, DOWN_N, DOWN_O, DOWN_P
NUMERIC INPUT RT_A, RT_B, RT_C, RT_D, RT_E, RT_F, RT_G, RT_H, RT_I, RT_J, RT_K, RT_L, RT_M, RT_N, RT_O, RT_P
NUMERIC OUTPUT CHILLER_1, CHILLER_2, CHILLER_3, CHILLER_4, CHILLER_5, CHILLER_6, CHILLER_7, CHILLER_8, CHILLER_9, CHILLER_10, CHILLER_11, CHILLER_12, CHILLER_13, CHILLER_14, CHILLER_15, CHILLER_16
NUMERIC CHILLER_DOWN[16], CHILLER_AVAIL[16], CHILLER_STATUS[16], CHILLER_RT[16], CHILLER_SEQ[16], SCORE[16], RUNTIME[16], PREVIOUS_CHILLER_AVAIL[16]
NUMERIC MAX_ORDER, i, CHILLERS_AVAIL, CHILLER_CHANGED, LAST_ROTATION, FORCE_RESEQUENCE

    INITALIZE:
    ' Initialize arrays using explicit assignments
    CHILLER_DOWN[1] = DOWN_A
    CHILLER_DOWN[2] = DOWN_B
    CHILLER_DOWN[3] = DOWN_C
    CHILLER_DOWN[4] = DOWN_D
    CHILLER_DOWN[5] = DOWN_E
    CHILLER_DOWN[6] = DOWN_F
    CHILLER_DOWN[7] = DOWN_G
    CHILLER_DOWN[8] = DOWN_H
    CHILLER_DOWN[9] = DOWN_I
    CHILLER_DOWN[10] = DOWN_J
    CHILLER_DOWN[11] = DOWN_K
    CHILLER_DOWN[12] = DOWN_L
    CHILLER_DOWN[13] = DOWN_M
    CHILLER_DOWN[14] = DOWN_N
    CHILLER_DOWN[15] = DOWN_O
    CHILLER_DOWN[16] = DOWN_P
    
    CHILLER_STATUS[1] = STATUS_A
    CHILLER_STATUS[2] = STATUS_B
    CHILLER_STATUS[3] = STATUS_C
    CHILLER_STATUS[4] = STATUS_D
    CHILLER_STATUS[5] = STATUS_E
    CHILLER_STATUS[6] = STATUS_F
    CHILLER_STATUS[7] = STATUS_G
    CHILLER_STATUS[8] = STATUS_H
    CHILLER_STATUS[9] = STATUS_I
    CHILLER_STATUS[10] = STATUS_J
    CHILLER_STATUS[11] = STATUS_K
    CHILLER_STATUS[12] = STATUS_L
    CHILLER_STATUS[13] = STATUS_M
    CHILLER_STATUS[14] = STATUS_N
    CHILLER_STATUS[15] = STATUS_O
    CHILLER_STATUS[16] = STATUS_P
    
    CHILLER_RT[1] = RT_A
    CHILLER_RT[2] = RT_B
    CHILLER_RT[3] = RT_C
    CHILLER_RT[4] = RT_D
    CHILLER_RT[5] = RT_E
    CHILLER_RT[6] = RT_F
    CHILLER_RT[7] = RT_G
    CHILLER_RT[8] = RT_H
    CHILLER_RT[9] = RT_I
    CHILLER_RT[10] = RT_J
    CHILLER_RT[11] = RT_K
    CHILLER_RT[12] = RT_L
    CHILLER_RT[13] = RT_M
    CHILLER_RT[14] = RT_N
    CHILLER_RT[15] = RT_O
    CHILLER_RT[16] = RT_P
    
    GOTO CHECK_CHILLER_AVAIL

CHECK_CHILLER_AVAIL:
    CHILLERS_AVAIL = 0
    CHILLER_CHANGED = FALSE

    FOR i = 1 TO 16
        CHILLER_AVAIL[i] = MAXIMUM(1 - CHILLER_DOWN[i], 0) * (CHILLER_STATUS[i] > 0)
        IF CHILLER_AVAIL[i] <> PREVIOUS_CHILLER_AVAIL[i] THEN
            CHILLER_CHANGED = TRUE
        ENDIF
        PREVIOUS_CHILLER_AVAIL[i] = CHILLER_AVAIL[i]
    NEXT i
    
    CHILLERS_AVAIL = SUM(CHILLER_AVAIL)
    
    IF CHILLER_CHANGED THEN
        GOTO CHECK_RESEQUENCE
    ENDIF
    
    GOTO WAIT_LOOP

CHECK_RESEQUENCE:
    IF ((FORCE_RESEQUENCE = On) & ((DATE - 604800) > LAST_ROTATION)) THEN
        LAST_ROTATION = DATE
        GOTO RUNTIME_RESEQUENCE
    ENDIF
    GOTO SEQUENCE_RESET

SEQUENCE_RESET:
    FOR i = 1 TO 16
        IF (CHILLER_AVAIL[i] = 0) & (CHILLER_SEQ[i] > 0) THEN CHILLER_SEQ[i] = 0
    NEXT i
    GOTO SEQUENCE_SCORE

SEQUENCE_SCORE:
    FOR i = 1 TO 16
        SCORE[i] = (CHILLER_AVAIL[i] > 0) + ((CHILLER_STATUS[i]) * (CHILLER_AVAIL[i] > 0))
    NEXT i
    GOTO CHILLER_ORDER

CHILLER_ORDER:
    FOR i = 1 TO 16
        CHILLER_SEQ[i] = 0
    NEXT i

    FOR i = 1 TO MINIMUM(CHILLERS_AVAIL, 16)
        MAX_ORDER = MAXITEM(SCORE)
        CHILLER_SEQ[MAX_ORDER] = i
        SCORE[MAX_ORDER] = 0
    NEXT i
    
    GOTO SET_SEQUENCE

RUNTIME_RESEQUENCE:
    FOR i = 1 TO 16
        RUNTIME[i] = MAXIMUM(CHILLER_RT[i], 0.01) * (CHILLER_AVAIL[i] > 0)
    NEXT i

    FOR i = 1 TO 16
        CHILLER_SEQ[i] = 0
    NEXT i

    FOR i = 1 TO MINIMUM(CHILLERS_AVAIL, 16)
        MAX_ORDER = MAXITEM(RUNTIME)
        CHILLER_SEQ[MAX_ORDER] = ((CHILLERS_AVAIL + 1) - i)
        RUNTIME[MAX_ORDER] = 0
    NEXT i
    
    FORCE_RESEQUENCE = Off
    GOTO SET_SEQUENCE

SET_SEQUENCE:
CHILLER_1 = CHILLER_SEQ[1]
CHILLER_2 = CHILLER_SEQ[2]
CHILLER_3 = CHILLER_SEQ[3]
CHILLER_4 = CHILLER_SEQ[4]
CHILLER_5 = CHILLER_SEQ[5]
CHILLER_6 = CHILLER_SEQ[6]
CHILLER_7 = CHILLER_SEQ[7]
CHILLER_8 = CHILLER_SEQ[8]
CHILLER_9 = CHILLER_SEQ[9]
CHILLER_10 = CHILLER_SEQ[10]
CHILLER_11 = CHILLER_SEQ[11]
CHILLER_12 = CHILLER_SEQ[12]
CHILLER_13 = CHILLER_SEQ[13]
CHILLER_14 = CHILLER_SEQ[14]
CHILLER_15 = CHILLER_SEQ[15]
CHILLER_16 = CHILLER_SEQ[16]
   
    GOTO WAIT_LOOP

WAIT_LOOP:
    WAIT 60
    GOTO INITALIZE
